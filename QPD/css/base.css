/* Matt DeVane
   CS 530 */

.title-header p{
	font-family: sans-serif;
	text-align: center;
	font-size: 100;
	font-style: bold;
}

/* The sidepanel menu */
.sidebar {
  height: 100vh;
  width: 25%; 
  position: fixed; 
  z-index: 1;
  top: 0;
  left: 0;
  background-color: #FFF;
  overflow-x: hidden;
  padding-top: 0px;
  transition: 0.0s;
}

/* TODO: test this on screens other than my laptop to make this portable */
.non-sidebar {
	margin-left: 25%;
}

/* The sidepanel links */
.sidebar a {
  padding: 8px 8px 8px 32px;
  text-decoration: none;
  font-size: 25px;
  color: #818181;
  display: block;
  transition: 0.3s;
}

/* When you mouse over the navigation links, change their color */
.sidebar a:hover {
  color: #f1f1f1;
}

/* Position and style the close button (top right corner) */
.sidebar .closebtn {
  float:right;
}

/* Style the button that is used to open the sidepanel */
.openbtn {
	font-size: 20px;
	cursor: pointer;
	background-color: #f1f1f1;
	padding: 10px 15px;
	border: 1px solid #ccc;
	display: none;
	z-index: 1;
}

.openbtn:hover {
  background-color: #ddd;
}

/* Style the tab */
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
  width = 100%;
}

/* Style the buttons that are used to open the tab content */
.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 10px 12px;
  transition: 0.3s;
}

/* Change background color of buttons on hover */
.tab button:hover {
  background-color: #ddd;
}

/* Create an active/current tablink class */
.tab button.active {
  background-color: #ccc;
}

/* Style the tab content */
.tabcontent {
  display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
  height: 100%;
}

.tabcontent-default {
	display: block;
}

.token-table { 
	table-layout: fixed;
    width: 100%;
	overflow: visible;
}

.token-table img {
	width: 100%;
}

.background-table {
	table-layout: fixed;
    width: 100%;
}

.background-table img {
	width: 100%;
	cursor: pointer;
}

.canvas-container {
	width: 900px;
	height: 600px;
	position:relative;
	background-image:url("/assets/backgrounds/Background_Full_Blank.png");
	background-size:contain;
	background-repeat:no-repeat;
	background-position: center;
	margin: auto;
}

/* we use a transparent image to make sure the canvas is sized correctly to backgrounds
   I'm not sure this is strictly necessary now that all background images are the same size? But it works */
.canvas-resizer {
    vertical-align: top;
    width: 100%;  /*max width */
    opacity: 0;  /* make it transparent */
	position: absolute;
	z-index: 0;
}

.canvas {
	vertical-align: top;
	width: 100%;
	height: 100%;
	top: 0;
	left: 0;
	position: absolute;
}

/* for anything fixed. Just the menu button, right now */
.sticky {
	position: fixed;
}

.title-header {
	font-size: 48;
	font-style: bold;
	text-align:center;
}

/*
 * classes for dropdown menu
 */
 
.dropbtn {
  background-color: #f1f1f1;
  color: black;
  padding: 16px;
  font-size: 16px;
  border: none;
}

/* The container <div> - needed to position the dropdown content */
.dropdown {
  position: relative;
  display: inline-block;
  background-color: #FFF;
  color: black;
}


.dropdown-menu a{
	color: black;
}

.dropdown-menu li:hover {
	background-color: #DDD;
}


/* Change color of dropdown links on hover */
.dropdown-submenu li:hover {background-color: #ddd;}

/* Show the dropdown menu on hover */
.dropdown:hover .dropdown-content {display: block;}

/* Change the background color of the dropdown button when the dropdown content is shown */
.dropdown:hover .dropbtn {background-color: #ddd;}

.dropdown-submenu {
  position: relative;
}

.dropdown-submenu .dropdown-menu {
	top: 0;
	left: 100%;
	margin-top: -1px;
	background-color: #FFF;
	color: black;
}

.dropdown-menu {
	padding-left: 5px;
	padding-right: 5px;
	min-width: 7rem;
}

/* this doesn't quite work; revisit this later, if we actually care that much about right aligning the carat (probably don't)*/
.caret {
	float: right;
	display: inline-block;
}

button.dropdown-toggle {
	background-color: inherit;
	border-style: none;
	border-width: 0;
	border-image: none;
}

.context-menu button {
	background-color: inherit;
	border-style: none;
	border-width: 0;
	border-image: none;
}

/* for anything that involves hard to reverse changes (mostly clearing canvas/tokens) */
.warning {
	color: red;
}

.no-bullets {
	list-style: none;
	margin-bottom: 5px;
}

.no-bullets li {
	margin-bottom: 10px;
}

.picker {
	width: 25%;
}

td .token-img:hover {
	cursor: grab;
}

/*
 * set up cursors
 * this doesn't work quite as expected, since CSS doesn't always reassign when elements change class
 * and Draggable abstracts a bunch of mouse events we could otherwise use
 * users seem to understand dragging anyway, so fine for now
 */
.token-img.token-img-active {
	cursor: pointer;
}

.button {
	cursor: pointer;
}


#ToolsTab input {
	cursor: pointer;
}

#ToolsTab input[type="number"] {
	cursor: auto;
}

.ui-draggable-dragging {
	cursor: grabbing;
}


